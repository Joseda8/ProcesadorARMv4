//module mux8_1(input A0, A1, A2, A3, A4, A5, A6, A7, s0, s1, s2,
//					output S);
//					
//	logic x0, x1, x2, x3, x4, x5, x6, x7;
//	
//	logic ntS0, ntS1, ntS2;
//	
//	not n0(ntS0,s0);  								//Entradas de selecci√≥n negadas
//	
//	not n1(ntS1,s1);
//	
//	not n2(ntS2,s2);
//	
//	
//	and g0(x0,A0,ntS0,ntS1,ntS2);
//	
//	and g1(x1,A1,ntS0,ntS1,s2);
//	
//	and g2(x2,A2,ntS0,s1,ntS2);
//	
//	and g3(x3,A3,ntS0,s1,s2);						//Compuertas AND con sus entradas
//	
//	and g4(x4,A4,s0,ntS1,ntS2);
//	
//	and g5(x5,A5,s0,ntS1,s2);
//	
//	and g6(x6,A6,s0,s1,ntS2);
//	
//	and g7(x7,A7,s0,s1,s2);
//	
//	
//	or r8(S,x0,x1,x2,x3,x4,x5,x6,x7);
//	
//endmodule 

module mux8_1
	#( parameter N = 4 )
	 ( input logic [N-1:0] a, b, c, d, e, f, g, h,
		input logic [2:0]   sel,
	  output logic [N-1:0] y );
	
	logic [N-1:0] muxAres;
	logic [N-1:0] muxBres;
	
	mux4_1 #(N) muxA(a, b, c, d, sel[1:0], muxAres);
	mux4_1 #(N) muxB(e, f, g, h, sel[1:0], muxBres);
	mux2_1 #(N) muxY(muxAres,muxBres,sel[2],y);
endmodule